name: OPV2V_npj_fvoxelrcnn_w
yaml_parser: "load_voxel_params"

root_dir: "/GPFS/rhome/yifanlu/workspace/dataset/OPV2V/train"
validate_dir: "/GPFS/rhome/yifanlu/workspace/dataset/OPV2V/validate"
test_dir: "/GPFS/rhome/yifanlu/workspace/dataset/OPV2V/test"

noise_setting:
  add_noise: true
  args: 
    pos_std: 0.2
    rot_std: 0.2
    pos_mean: 0
    rot_mean: 0
    
comm_range: 70

train_params:
  batch_size: &batch_size 2
  epoches: 20
  eval_freq: 2
  save_freq: 1

fusion:
  core_method: 'IntermediateFusionDatasetV3' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset IntermediateFusionDatasetV2 supported
  args: 
    proj_first: &proj_first false

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.1, 0.1, 0.1]
    max_points_per_voxel: &T 5
    max_voxel_train: 36000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -41.6, -3, 140.8, 41.6, 1]
  keep_original_lidar: true

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess: &postprocess_params
  core_method: 'FpvrcnnPostprocessor' # VoxelPostprocessor, BevPostprocessor, FpvrcnnPostprocessor supported
  gt_range: [-140, -40, -3, 140, 40, 1]
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 8
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.5
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: fpvrcnn # corresponding to FPVRCNN
  args:
    proj_first: *proj_first
    activate_stage2: False
    N: *batch_size
    T: *T
    lidar_range: *cav_lidar
    voxel_size: *voxel_size
    anchor_num: *achor_num
    mean_vfe:
      num_point_features: 4
    spconv:
      num_features_in: 64
      num_features_out: 64
    map2bev:
      feature_num: 128
    ssfa:
      feature_num: 128
    head:
      num_input: 128
      num_pred: 14
      num_cls: 2
      num_iou: 2
      use_dir: True
      num_dir: 4
    post_processer: *postprocess_params
    voxel_roi_pooling:
      enlarge_selection_boxes: true
      num_out_features: &cpm_features 32
      features_source: ['x_conv2', 'x_conv3', 'x_conv4']
      pred_mlp: True
      grid_size: 6
      pool_layers:
        x_conv2:
          mlps: [[32, 32]]
          query_ranges: [[4, 4, 4]]
          pool_radius: [0.4]
          nsample: [16]
          pool_method: max_pool
        x_conv3:
          mlps: [[32, 32]]
          query_ranges: [[4, 4, 4]]
          pool_radius: [0.8]
          nsample: [16]
          pool_method: max_pool
        x_conv4:
          mlps: [[32, 32]]
          query_ranges: [[4, 4, 4]]
          pool_radius: [1.6]
          nsample: [16]
          pool_method: max_pool

    matcher: 'none' # may need to configure parameters for loc correction
    roi_head:
      c_out: 96
      num_class: 1
      shared_fc: [256, 256]
      cls_fc: [256, 256]
      reg_fc: [256, 256]
      dp_ratio: 0.3

loss:
  core_method: fpvrcnn_loss
  args:
    stage1:
      cls_weight: 1.0
      reg: 2.0
      dir_args: 
        dir_weight: 0.2
        args: *dir_args
        anchor_yaw: *anchor_yaw
    stage2:
      cls:
        type: 'WeightedSigmoidBinaryCELoss'
        weight: 1.0
      iou: *iou
      reg:
        type: 'WeightedSmoothL1Loss'
        sigma: 3.0
        reduction: 'mean'
        code_weights: [20.0]
        weight: 1.0

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 20]