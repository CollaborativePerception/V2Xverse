name: dair_centerpoint_when2com
data_dir: "/GPFS/rhome/quanhaoli/workspace/dataset/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure"
root_dir: "/GPFS/rhome/quanhaoli/workspace/dataset/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/GPFS/rhome/quanhaoli/workspace/dataset/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure/val.json"
test_dir: "/GPFS/rhome/quanhaoli/workspace/dataset/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure/val.json"

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 6
  epoches: 40
  eval_freq: 2
  save_freq: 2
  max_cav: &max_cav 2

input_source: ['lidar']
label_type: 'lidar'

comm_range: 200
only_vis_ego: true

fusion:
  core_method: 'intermediate' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  dataset: 'dairv2x'
  args:
    proj_first: false
    clip_pc: false

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav. Format: xyzxyz minmax
  cav_lidar_range: &cav_lidar [-100.8, -40, -3, 100.8, 40, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess: &postprocess_params
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: &anchor_yaw [0]
    feature_stride: 2
    num: &achor_num 1
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.4
  order: 'hwl' # hwl or lwh
  max_num: &max_num 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 1
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: center_point_baseline
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num
    out_size_factor: &out_size_factor 2
    max_cav: *max_cav

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone:
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
    # shrink_header:
    #   kernal_size: [ 3 ]
    #   stride: [ 1 ]
    #   padding: [ 1 ]
    #   dim: [ 256 ]
    #   input_dim: 384 # 128 * 3

    fusion_method: when2comm
    when2comm:
      in_channels: 384
      H: 100
      W: 252
      query_size: 32
      key_size: 128

loss:
  core_method: center_point_loss
  args:
    target_assigner_config:
      max_objs: *max_num
      voxel_size: *voxel_size
      cav_lidar_range: *cav_lidar
      out_size_factor: *out_size_factor 
      gaussian_overlap: 0.1
      min_radius: 2 
      box_coder: ResidualCoder
    cls_weight: 1.0
    loc_weight: 2.0
    code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]


optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15, 20]

