name: HEAL_opv2v_m4_ALIGNTO_m1m2
root_dir: "dataset/OPV2V/train"
validate_dir: "dataset/OPV2V/validate"
test_dir: "dataset/OPV2V/test"

yaml_parser: "load_general_params"
train_params:
  batch_size: &batch_size 4
  epoches: 30
  eval_freq: 2
  save_freq: 2
  max_cav: 6

comm_range: 120
input_source: ['lidar', 'camera', 'depth']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-140.8, -40, -3, 140.8, 40, 1]

add_data_extension: ['bev_visibility.png']

heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m4"
  mapping_dict:
    m1: m1
    m2: m2
    m3: m4
    m4: m4
  cav_preference:
    m1: 0.5
    m2: 0.5
    
  modality_setting:
    m1:
      sensor_type: &sensor_type_m1 'lidar'
      core_method: &core_method_m1 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m1 [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar

    m2:
      sensor_type: &sensor_type_m2 'camera'
      core_method: &core_method_m2 "lift_splat_shoot"

      grid_conf: &grid_conf_m2
        xbound: [-48, 48, 0.4]   # Limit the range of the x direction and divide the grids
        ybound: [-48, 48, 0.4]   # Limit the range of the y direction and divide the grids
        zbound: [-10, 10, 20.0]   # Limit the range of the z direction and divide the grids
        ddiscr: [2, 50, 48]
        mode: 'LID'
      data_aug_conf: &data_aug_conf_m2
        resize_lim: [0.65, 0.7]
        final_dim: [384, 512]
        rot_lim: [-3.6, 3.6]
        H: 600
        W: 800
        rand_flip: False
        bot_pct_lim: [0.0, 0.05]
        cams: ['camera0', 'camera1', 'camera2', 'camera3']
        Ncams: 4

    m4:
      sensor_type: &sensor_type_m4 'camera'
      core_method: &core_method_m4 "lift_splat_shoot"

      grid_conf: &grid_conf_m4
        xbound: [-48, 48, 0.4]   # Limit the range of the x direction and divide the grids
        ybound: [-48, 48, 0.4]   # Limit the range of the y direction and divide the grids
        zbound: [-10, 10, 20.0]   # Limit the range of the z direction and divide the grids
        ddiscr: [2, 50, 48]
        mode: 'LID'
      data_aug_conf: &data_aug_conf_m4
        resize_lim: [0.56, 0.61]
        final_dim: [336, 448]
        rot_lim: [-3.6, 3.6]
        H: 600
        W: 800
        rand_flip: False
        bot_pct_lim: [0.0, 0.05]
        cams: ['camera0', 'camera1', 'camera2', 'camera3']
        Ncams: 4

fusion:
  core_method: 'intermediateheter'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: [0.4, 0.4, 4] # useful
    max_points_per_voxel: 1 # useless
    max_voxel_train: 1 # useless
    max_voxel_test: 1 # useless
  # lidar range for each individual cav.
  cav_lidar_range: *cav_lidar

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: heter_model_sharedhead
  args:
    ego_modality: *ego_modality
    lidar_range: *cav_lidar
    supervise_single: true
    stage2_added_modality: *ego_modality

    m1:
      core_method: *core_method_m1
      sensor_type: *sensor_type_m1

      encoder_args:
        voxel_size: *voxel_size_m1
        lidar_range: *cav_lidar
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]

      aligner_args:
        core_method: convnext
        spatial_align: false
        args:
          num_of_blocks: 3
          dim: 64

    m2:
      core_method: *core_method_m2
      sensor_type: *sensor_type_m2

      encoder_args:
        anchor_number: *anchor_num
        grid_conf: *grid_conf_m2
        data_aug_conf: *data_aug_conf_m2
        img_downsample: 8
        img_features: &img_feature 128
        use_depth_gt: false
        depth_supervision: true
        camera_encoder: EfficientNet

      camera_mask_args:
        cav_lidar_range: *cav_lidar
        grid_conf: *grid_conf_m2

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
        inplanes: 128

      aligner_args:
        core_method: convnext
        spatial_align: false
        args:
          num_of_blocks: 3
          dim: 64

    m4:
      core_method: *core_method_m4
      sensor_type: *sensor_type_m4

      encoder_args:
        anchor_number: *anchor_num
        grid_conf: *grid_conf_m4
        data_aug_conf: *data_aug_conf_m4
        img_downsample: 8
        img_features: 128
        use_depth_gt: false
        depth_supervision: true
        camera_encoder: Resnet101

      camera_mask_args:
        cav_lidar_range: *cav_lidar
        grid_conf: *grid_conf_m4

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
        inplanes: 128

      aligner_args:
        core_method: convnext
        spatial_align: true
        args:
          num_of_blocks: 3
          dim: 64
          warpnet_indim: 128
          teacher: m1 

    fusion_method: max # multiscale

    fusion_backbone:
      fix: true
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]

    shrink_header: # lidar
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3

    in_head_single: 64
    in_head: 256
    
    anchor_number: *anchor_num
    dir_args: *dir_args


loss:
  core_method: point_pillar_depth_loss
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args
    depth:
      weight: 1.0

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 20]

