name: v2xsim2_coalign
root_dir: "dataset/v2xsim2_info/v2xsim_infos_train.pkl"
validate_dir: "dataset/v2xsim2_info/v2xsim_infos_val.pkl"
test_dir: "dataset/v2xsim2_info/v2xsim_infos_test.pkl"

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 16
  epoches: 30
  eval_freq: 2
  save_freq: 3
  max_cav: &max_cav 5

noise_setting:
  add_noise: true
  args:
    pos_std: 0.2
    rot_std: 0.2
    pos_mean: 0
    rot_mean: 0

input_source: ['lidar']
label_type: 'lidar'

comm_range: 70

fusion:
  core_method: 'intermediate'
  dataset: 'v2xsim'
  args: 
    proj_first: false

box_align:
  train_result: "opencood/logs/coalign_precalc/v2xsim2/train/stage1_boxes.json"
  val_result: "opencood/logs/coalign_precalc/v2xsim2/val/stage1_boxes.json"
  test_result: "opencood/logs/coalign_precalc/v2xsim2/test/stage1_boxes.json"
  args:
    use_uncertainty: true
    landmark_SE2: true
    adaptive_landmark: false
    normalize_uncertainty: false
    abandon_hard_cases: true
    drop_hard_boxes: true

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 5]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-32, -32, -3, 32, 32, 2]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: point_pillar_baseline_multiscale
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *anchor_num

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone: # backbone will downsample 2x
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]

    fusion_method: att
    att:
      feat_dim: [64, 128, 256]

    shrink_header:
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3

    dir_args: *dir_args
    

loss:
  core_method: point_pillar_loss
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 2.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15]

