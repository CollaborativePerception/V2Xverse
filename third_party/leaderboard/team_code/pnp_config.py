import os

import argparse
import opencood.hypes_yaml.yaml_utils as yaml_utils
import importlib
from common.io import load_config_from_yaml



class GlobalConfig:
    """base architecture configurations"""

    # Controller
    turn_KP = 1.0
    turn_KI = 0.2
    turn_KD = 0.1
    turn_n = 5  # buffer size

    speed_KP = 5.0
    speed_KI = 1
    speed_KD = 0.1
    speed_n = 20  # buffer size

    max_throttle = 0.75             # upper limit on throttle signal value in dataset
    brake_speed = 0.1               # desired speed below which brake is triggered
    brake_ratio = 1.1               # ratio of speed to desired speed at which brake is triggered
    clip_delta = 0.35               # maximum change in speed input to logitudinal controller

    change_rsu_frame = 5            # frame gap before a new rsu is spawned
    max_speed = 5                   # the max speed of ego vehicle
    collision_buffer = [2.5, 1.2]   # safe distance in vertical and horizontal
    momentum = 0                    #
    skip_frames = 4                 # frame gap before a new driving control signal is generated
    detect_threshold = 0.04         #
    target_point_distance = 10      # distance from ego vehicle to the target point generated by global navigation planner

    ego_num = 1                     # number of communicating drivable ego vehicles

    detection_range = [36, 12, 12, 12] # front rear left right

    # rsu config
    rsu_height = 7.5                # height of rsu
    rsu_lane_side = 'right'         # location of rsu, on the right/left side of the lane
    rsu_distance = 12               # horizontal distance from rsu to ego vehicle, positive value means foward direction

    # perception model directory, including model checkpoint and config file
    perception_model_dir = '/GPFS/data/gjliu/Auto-driving/OpenCOODv2/opencood/logs/debug2'

    print('init_first')

    # planner model config

    print('init_first_2')
    planner_config = load_config_from_yaml("codriving/hypes_yaml/codriving/planner.yaml")
    # planner model checkpoint
    planner_model_checkpoint = '/GPFS/public/v2xverse/checkpoints/planner-DB26-20230818-194914/models/epoch_49.ckpt'

    print('init_first_2')

    def __init__(self, **kwargs):  
        for k, v in kwargs.items():
            setattr(self, k, v)
